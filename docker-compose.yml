version: "3.8"

services:
  model-gateway:
    image: ghcr.io/${GITHUB_REPOSITORY:-user/model-gateway}:${IMAGE_TAG:-latest}
    container_name: model-gateway
    restart: unless-stopped
    ports:
      - "50051:50051"
    environment:
      - NODE_ENV=production
      - GRPC_PORT=50051
      - LOG_LEVEL=info
      # Add your model provider API keys here
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    volumes:
      - ./config:/app/config
      - model-gateway-logs:/app/logs
    networks:
      - model-gateway-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "const grpc = require('@grpc/grpc-js'); const client = new grpc.Client('localhost:50051', grpc.credentials.createInsecure()); client.waitForReady(Date.now() + 5000, (err) => { process.exit(err ? 1 : 0); });",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Optional monitoring service using Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: model-gateway-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    networks:
      - model-gateway-network
    depends_on:
      - model-gateway

  # Optional visualization using Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: model-gateway-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    networks:
      - model-gateway-network
    depends_on:
      - prometheus

networks:
  model-gateway-network:
    driver: bridge

volumes:
  model-gateway-logs:
  prometheus-data:
  grafana-data:
